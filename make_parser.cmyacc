sml
name MakeParser

terminal LOWER_IDENT of string
terminal UPPER_IDENT of string
terminal QUOTE_IDENT of string

terminal ONE
terminal CAP_TYPE
terminal CAP_EXT
terminal S
terminal FUN
terminal FST
terminal SND
terminal FORALL
terminal EXIST
terminal POLY
terminal PACK
terminal UNPACK
terminal AS
terminal IN
terminal FIX
terminal LET
terminal CIRC
terminal RET
terminal BIND

terminal LPAREN
terminal RPAREN
terminal LBRACK
terminal RBRACK
terminal LWHITEPAREN
terminal RWHITEPAREN
terminal LWHITEANGLE
terminal RWHITEANGLE

terminal COLON
terminal SEAL
terminal RARROW precr 20
terminal LARROW
terminal STAR precl 30
terminal EQUAL
terminal SLASH
terminal DOT
terminal COMMA

nonterminal Program : program =
  1:Module => program_module

nonterminal Module : module =
  1:ModuleApp => module_app
  FUN 1:ModuleParams RARROW 2:Module => mabs
  LET 1:LOWER_IDENT EQUAL 2:Term IN 3:Module                => mlet
  LET 1:TVar SLASH 2:UPPER_IDENT EQUAL 3:Module IN 4:Module => mletmodule
  CIRC 1:LaxModule                                          => mcirc

nonterminal ModuleParams : module_params =
  /* empty */ => empty_module_params
  LPAREN 1:TVar SLASH 2:UPPER_IDENT COLON 3:Sig RPAREN 4:ModuleParams => cons_module_params

nonterminal ModuleApp : module =
  1:ModuleAtom => module_atom
  1:ModuleApp 2:ModuleAtom => mapp
  FST 1:ModuleAtom       => mfst
  SND 1:ModuleAtom       => msnd

nonterminal ModuleAtom : module =
  LPAREN 1:Module RPAREN => module_paren
  1:UPPER_IDENT => mvar
  LPAREN RPAREN => mstar
  LWHITEPAREN 1:Type RWHITEPAREN => mstatic
  LWHITEANGLE 1:Term RWHITEANGLE => mdynamic
  LPAREN 1:Module COMMA 2:Module RPAREN => mpair

nonterminal LaxModule : lax_module =
  RET 1:Module => lret
  1:ModuleApp SEAL 2:Sig => lseal
  BIND 1:TVar SLASH 2:UPPER_IDENT LARROW 3:Module IN 4:LaxModule => lbind
  UNPACK LBRACK 1:TVar COMMA 2:LOWER_IDENT RBRACK EQUAL 3:Term IN 4:LaxModule => lunpack

nonterminal Sig : sign =
  ONE => sunit
  LWHITEPAREN 1:Kind RWHITEPAREN => sstatic
  LWHITEANGLE 1:Type RWHITEANGLE => sdynamic
  LPAREN 1:TVar COLON 2:Sig RPAREN RARROW 3:Sig => sarrow
  LPAREN 1:TVar COLON 2:Sig RPAREN STAR 3:Sig => sprod
  CIRC 1:PosSig                               => smonad

nonterminal PosSig : pos_sig =
  1:Sig => pdown /* We omit explicit down-shift. */
  EXIST 1:TVar COLON 2:Kind DOT 3:PosSig => pexist
  LPAREN 1:PosSig RPAREN                 => pos_sig_id

nonterminal TVar : tvar =
  1:QUOTE_IDENT => quote_ident

nonterminal Type : tycon =
  1:TypeBin => type_bin
  FUN 1:TypeParams RARROW 2:Type => tabs
  FORALL 1:TVar COLON 2:Kind DOT 3:Type => tforall
  1:Exist => texist

nonterminal TypeParams : type_params =
  /* empty */ => empty_type_params
  LPAREN 1:TVar COLON 2:Kind RPAREN 3:TypeParams => cons_type_params

nonterminal Exist : existential =
  EXIST 1:TVar COLON 2:Kind DOT 3:Type => exist

nonterminal TypeBin : tycon =
  1:TypeApp => type_app
  1:TypeBin RARROW 2:TypeBin => tarrow
  1:TypeBin STAR 2:TypeBin => tprod

nonterminal TypeApp : tycon =
  1:TypeAtom => type_atom
  1:TypeApp 2:TypeAtom => tapp
  FST 1:TypeAtom       => tfst
  SND 1:TypeAtom       => tsnd

nonterminal TypeAtom : tycon =
  LPAREN 1:Type RPAREN => type_paren
  1:TVar => tvar_
  LPAREN RPAREN => tstar
  LPAREN 1:Type COMMA 2:Type RPAREN => tpair
  ONE => tunit

nonterminal Kind : kind =
  ONE => kunit
  CAP_TYPE => ktype
  S LPAREN 1:Type RPAREN => ksingleton
  LPAREN 1:TVar COLON 2:Kind RPAREN RARROW 3:Kind => karrow
  LPAREN 1:TVar COLON 2:Kind RPAREN STAR 3:Kind => kprod

nonterminal Term : term =
  1:TermApp => term_id
  FUN 1:TermParams RARROW 2:Term => eabs
  POLY LPAREN 1:TVar COLON 2:Kind RPAREN RARROW 3:Term => egen
  PACK LBRACK 1:Type COMMA 2:Term RBRACK AS 3:Exist => epack
  UNPACK LBRACK 1:TVar COMMA 2:LOWER_IDENT RBRACK EQUAL 3:Term IN 4:Term => eunpack
  LET 1:LOWER_IDENT EQUAL 2:Term IN 3:Term => elet
  LET 1:TVar SLASH 2:UPPER_IDENT EQUAL 3:LaxModule IN 4:Term => eletlax

nonterminal TermParams : term_params =
  /* empty */ => empty_term_params
  LPAREN 1:LOWER_IDENT COLON 2:Type RPAREN 3:TermParams => cons_term_params

nonterminal TermApp : term =
  1:TermAtom => term_id
  1:TermApp 2:TermAtom => eapp
  FST 1:TermAtom       => efst
  SND 1:TermAtom       => esnd
  1:TermApp LBRACK 2:Type RBRACK => einst
  FIX LBRACK 1:Type RBRACK 2:TermAtom => efix
  CAP_EXT 1:ModuleAtom => eext

nonterminal TermAtom : term =
  LPAREN 1:Term RPAREN => term_id
  1:LOWER_IDENT => evar
  LPAREN RPAREN => estar
  LPAREN 1:Term COMMA 2:Term RPAREN => epair

start Program
